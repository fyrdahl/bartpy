# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
import _italgos

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class iter_op_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPEID = property(_italgos.iter_op_data_TYPEID_get, _italgos.iter_op_data_TYPEID_set)

    def __init__(self):
        _italgos.iter_op_data_swiginit(self, _italgos.new_iter_op_data())
    __swig_destroy__ = _italgos.delete_iter_op_data

# Register iter_op_data in _italgos:
_italgos.iter_op_data_swigregister(iter_op_data)

class iter_op_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fun = property(_italgos.iter_op_s_fun_get, _italgos.iter_op_s_fun_set)
    data = property(_italgos.iter_op_s_data_get, _italgos.iter_op_s_data_set)

    def __init__(self):
        _italgos.iter_op_s_swiginit(self, _italgos.new_iter_op_s())
    __swig_destroy__ = _italgos.delete_iter_op_s

# Register iter_op_s in _italgos:
_italgos.iter_op_s_swigregister(iter_op_s)

class iter_nlop_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fun = property(_italgos.iter_nlop_s_fun_get, _italgos.iter_nlop_s_fun_set)
    data = property(_italgos.iter_nlop_s_data_get, _italgos.iter_nlop_s_data_set)

    def __init__(self):
        _italgos.iter_nlop_s_swiginit(self, _italgos.new_iter_nlop_s())
    __swig_destroy__ = _italgos.delete_iter_nlop_s

# Register iter_nlop_s in _italgos:
_italgos.iter_nlop_s_swigregister(iter_nlop_s)

class iter_op_p_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fun = property(_italgos.iter_op_p_s_fun_get, _italgos.iter_op_p_s_fun_set)
    data = property(_italgos.iter_op_p_s_data_get, _italgos.iter_op_p_s_data_set)

    def __init__(self):
        _italgos.iter_op_p_s_swiginit(self, _italgos.new_iter_op_p_s())
    __swig_destroy__ = _italgos.delete_iter_op_p_s

# Register iter_op_p_s in _italgos:
_italgos.iter_op_p_s_swigregister(iter_op_p_s)


def iter_op_call(op, dst, src):
    return _italgos.iter_op_call(op, dst, src)

def iter_nlop_call(op, N, args):
    return _italgos.iter_nlop_call(op, N, args)

def iter_op_p_call(op, rho, dst, src):
    return _italgos.iter_op_p_call(op, rho, dst, src)

def conjgrad(maxiter, l2lambda, epsilon, N, vops, linop, x, b, monitor):
    return _italgos.conjgrad(maxiter, l2lambda, epsilon, N, vops, linop, x, b, monitor)

def landweber(maxiter, epsilon, alpha, N, M, vops, op, adj, x, b, callback, monitor):
    return _italgos.landweber(maxiter, epsilon, alpha, N, M, vops, op, adj, x, b, callback, monitor)

def landweber_sym(maxiter, epsilon, alpha, N, vops, op, x, b, monitor):
    return _italgos.landweber_sym(maxiter, epsilon, alpha, N, vops, op, x, b, monitor)
class ist_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rsnew = property(_italgos.ist_data_rsnew_get, _italgos.ist_data_rsnew_set)
    rsnot = property(_italgos.ist_data_rsnot_get, _italgos.ist_data_rsnot_set)
    iter = property(_italgos.ist_data_iter_get, _italgos.ist_data_iter_set)
    maxiter = property(_italgos.ist_data_maxiter_get)
    tau = property(_italgos.ist_data_tau_get, _italgos.ist_data_tau_set)
    scale = property(_italgos.ist_data_scale_get, _italgos.ist_data_scale_set)

    def __init__(self):
        _italgos.ist_data_swiginit(self, _italgos.new_ist_data())
    __swig_destroy__ = _italgos.delete_ist_data

# Register ist_data in _italgos:
_italgos.ist_data_swigregister(ist_data)


def ist(maxiter, epsilon, tau, N, vops, ist_continuation, op, thresh, x, b, monitor):
    return _italgos.ist(maxiter, epsilon, tau, N, vops, ist_continuation, op, thresh, x, b, monitor)

def fista(maxiter, epsilon, tau, N, vops, ist_continuation, op, thresh, x, b, monitor):
    return _italgos.fista(maxiter, epsilon, tau, N, vops, ist_continuation, op, thresh, x, b, monitor)

def irgnm(iter, alpha, alpha_min, redu, N, M, vops, op, adj, inv, x, x0, y, callback, monitor):
    return _italgos.irgnm(iter, alpha, alpha_min, redu, N, M, vops, op, adj, inv, x, x0, y, callback, monitor)

def irgnm2(iter, alpha, alpha_min, alpha0, redu, N, M, vops, op, der, lsqr, x, xref, y, callback, monitor):
    return _italgos.irgnm2(iter, alpha, alpha_min, alpha0, redu, N, M, vops, op, der, lsqr, x, xref, y, callback, monitor)

def altmin(iter, alpha, redu, N, vops, NI, op, min_ops, x, y, callback):
    return _italgos.altmin(iter, alpha, redu, N, vops, NI, op, min_ops, x, y, callback)

def pocs(maxiter, D, proj_ops, vops, N, x, monitor):
    return _italgos.pocs(maxiter, D, proj_ops, vops, N, x, monitor)

def power(maxiter, N, vops, op, u):
    return _italgos.power(maxiter, N, vops, op, u)

def chambolle_pock(maxiter, epsilon, tau, sigma, theta, decay, N, M, vops, op_forw, op_adj, thresh1, thresh2, x, monitor):
    return _italgos.chambolle_pock(maxiter, epsilon, tau, sigma, theta, decay, N, M, vops, op_forw, op_adj, thresh1, thresh2, x, monitor)


