# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
import _linop_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def forward(op, ddims, sdims):
    return _linop_swig.forward(op, ddims, sdims)

def adjoint(op, ddims, sdims):
    return _linop_swig.adjoint(op, ddims, sdims)

def normal(op, dims, src):
    return _linop_swig.normal(op, dims, src)

def pseudo_inv(op, _lambda, ddims, sdims):
    return _linop_swig.pseudo_inv(op, _lambda, ddims, sdims)

def create(ON, odims, IN, idims, data, forward, adjoint, normal, norm_inv, arg10):
    return _linop_swig.create(ON, odims, IN, idims, data, forward, adjoint, normal, norm_inv, arg10)

def create2(ON, odims, ostr, IN, idims, istrs, data, forward, adjoint, normal, norm_inv, arg12):
    return _linop_swig.create2(ON, odims, ostr, IN, idims, istrs, data, forward, adjoint, normal, norm_inv, arg12)

def get_data(ptr):
    return _linop_swig.get_data(ptr)

def free(op):
    return _linop_swig.free(op)

def forward_unchecked(op, dst, src):
    return _linop_swig.forward_unchecked(op, dst, src)

def adjoint_unchecked(op, dst, src):
    return _linop_swig.adjoint_unchecked(op, dst, src)

def normal_unchecked(op, dst, src):
    return _linop_swig.normal_unchecked(op, dst, src)

def norm_inv_unchecked(op, _lambda, dst, src):
    return _linop_swig.norm_inv_unchecked(op, _lambda, dst, src)

def chain(a, b):
    return _linop_swig.chain(a, b)

def chainN(N, x):
    return _linop_swig.chainN(N, x)

def chain_FF(a, b):
    return _linop_swig.chain_FF(a, b)

def stack(D, E, a, b):
    return _linop_swig.stack(D, E, a, b)

def domain(x):
    return _linop_swig.domain(x)

def codomain(x):
    return _linop_swig.codomain(x)

def clone(x):
    return _linop_swig.clone(x)

def loop(D, dims, op):
    return _linop_swig.loop(D, dims, op)

def copy_wrapper(D, istrs, ostrs, op):
    return _linop_swig.copy_wrapper(D, istrs, ostrs, op)

def null_create2(NO, odims, ostrs, NI, idims, istrs):
    return _linop_swig.null_create2(NO, odims, ostrs, NI, idims, istrs)

def null_create(NO, odims, NI, idims):
    return _linop_swig.null_create(NO, odims, NI, idims)

def plus(a, b):
    return _linop_swig.plus(a, b)

def plus_FF(a, b):
    return _linop_swig.plus_FF(a, b)

def cdiag_create(N, flags, diag):
    return _linop_swig.cdiag_create(N, flags, diag)

def rdiag_create(N, flags, diag):
    return _linop_swig.rdiag_create(N, flags, diag)

def identity_create(N):
    return _linop_swig.identity_create(N)

def resize_center_create(N, out_dims, in_dims):
    return _linop_swig.resize_center_create(N, out_dims, in_dims)

def expand_create(N, out_dims, in_dims):
    return _linop_swig.expand_create(N, out_dims, in_dims)

def reshape_create(A, out_dims, B, in_dims):
    return _linop_swig.reshape_create(A, out_dims, B, in_dims)

def extract_create(N, pos, out_dims, in_dims):
    return _linop_swig.extract_create(N, pos, out_dims, in_dims)

def transpose_create(a, b, dims):
    return _linop_swig.transpose_create(a, b, dims)

def fft_create(N, flags):
    return _linop_swig.fft_create(N, flags)

def ifft_create(N, flags):
    return _linop_swig.ifft_create(N, flags)

def fftc_create(N, flags):
    return _linop_swig.fftc_create(N, flags)

def ifftc_create(N, flags):
    return _linop_swig.ifftc_create(N, flags)

def fft_create_measure(N, flags):
    return _linop_swig.fft_create_measure(N, flags)

def cdf97_create(N, flag):
    return _linop_swig.cdf97_create(N, flag)


